/* ==================================================================================================
 * REVEAL
 * Sometimes people may call this an "accordion".
 * ================================================================================================== */

.c-reveal {
	position: relative;
}

.c-reveal.is-animating,
.c-reveal:not(.is-active) {
	overflow: hidden;
}

.c-reveal.is-animating,
.c-reveal.is-animating > .c-reveal__content {
	transition-duration: $revealTransitionDuration;
	transition-timing-function: $revealTransitionTimingFunction;
}

/**
 * Hides the Reveal while the JS doesn't run
 */
.#{$noJsClass} .c-reveal {
	display: none;
}

/**
 * Hidden (helper class)
 * May be used with other classes to collapse the content box while it's hidden
 */
.c-reveal--hidden {
	max-height: 0;
}




/* Async Animation Placeholder Class
   ================================================================================================== */

%revealAsyncAnimation {
	&,
	&.is-active > .c-reveal__content {
		transition-delay: ($revealTransitionDuration / 2);
	}

	&.is-active,
	> .c-reveal__content {
		transition-delay: 0s;
	}
}




/* Unfold
   ============================================================================================== */

.c-reveal--unfold {
	max-height: 0;
	perspective: 1000px;

	@extend %revealAsyncAnimation;
}

.c-reveal--unfold > .c-reveal__content {
	transform: rotateX(-107deg) translate3d(0, 0, 0);
	transform-origin: 0 0;
}

.c-reveal--unfold.is-active > .c-reveal__content {
	transform: rotateX(0deg) translate3d(0, 0, 0);
}




/* Fade
   ============================================================================================== */

.c-reveal--fade > .c-reveal__content {
	opacity: 0;
}

.c-reveal--fade.is-active > .c-reveal__content {
	opacity: 1;
}




/* Appear
   ============================================================================================== */

.c-reveal--appearFromLeft,
.c-reveal--appearFromRight,
.c-reveal--appearFromTop,
.c-reveal--appearFromBottom {
	@extend %revealAsyncAnimation;
}

.c-reveal--appearFromLeft > .c-reveal__content,
.c-reveal--appearFromRight > .c-reveal__content,
.c-reveal--appearFromTop > .c-reveal__content,
.c-reveal--appearFromBottom > .c-reveal__content {
	opacity: 0;
}

.c-reveal--appearFromLeft.is-active > .c-reveal__content,
.c-reveal--appearFromRight.is-active > .c-reveal__content,
.c-reveal--appearFromTop.is-active > .c-reveal__content,
.c-reveal--appearFromBottom.is-active > .c-reveal__content {
	transform: translateX(0);
	opacity: 1;
}

// Left
.c-reveal--appearFromLeft > .c-reveal__content {
	transform: translateX(-100%);
}

// Right
.c-reveal--appearFromRight > .c-reveal__content {
	transform: translateX(100%);
}

// Top
.c-reveal--appearFromTop > .c-reveal__content {
	transform: translateY(-100%);
}

// Bottom
.c-reveal--appearFromBottom > .c-reveal__content {
	transform: translateY(100%);
}
